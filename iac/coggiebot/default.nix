{
  self
  , lib
  , pkgs
  , stdenv
  , naerk-lib
  , recursiveMerge
}:
let
  coggiebot-setup = features-list:
    {
      name = "coggiebot";
      nativeBuildInputs = [];
      buildInputs = [];

      REV=(self.rev or "canary");
      src = ../../.;

      passthru = {
        inherit features-list;
      };
    };

  # these are
  genericFeature = {name, pkg-override ? (c: c), dependencies ? [], config-options ? {}}:
    {
      ${name} = {
        featureName = "${name}";

        inherit dependencies pkg-override config-options;
      };
    };

  features =
    let
      raw-mockingbird = pkgs.callPackage ./mockingbird.nix { inherit genericFeature naerk-lib ; };
      mockingbird-lib =
        builtins.removeAttrs raw-mockingbird ["override" "overrideDerivation"];

      mockingbird = {
        name = "mockingbird";
        pkg-override = mockingbird-lib.mockingbird-fn;
      };

      demix = {
        name = "demix";
        pkg-override = coggiebot: mockingbird-lib.demix-fn (mockingbird-lib.mockingbird-fn coggiebot);
        dependencies = [ mockingbird ];
      };

    in
      (genericFeature { name = "basic-cmds"; }) //
      (genericFeature { name = "bookmark"; }) //
      (genericFeature { name = "list-feature-cmd"; }) //
      genericFeature demix //
      genericFeature mockingbird //

      (genericFeature {
        name = "dj-channel";
        dependencies = [ demix ];
      });

  all-features-list = lib.mapAttrsToList (_: v: v) features;
  # create a list of features that were enabled
  # for a given coggiebot variant.
  is-feature-enabled = c: feat:
    lib.lists.any (x: x == feat)
      c.passthru.features-list;

  which-features = coggiebot:
    lib.foldl (s: f: s ++ [
      ({enabled = is-feature-enabled coggiebot f;} // f)
    ]) [] all-features-list;

  # New line separated.
  # The suffix number describes if the feature name was enabled. (1: enabled, 0: disabled)
  # The delimiter ':' is used to separate the feature name from the suffix.
  featurelist = coggiebot: pkgs.writeTextDir
    "share/coggiebot-features.list"
    ''
      # This file is automatically generated by coggiebot.
      ################################################################
      # It contains a list of features that were enabled for this build.
      # The suffix number describes if the feature name was enabled. (1: enabled, 0: disabled)
      # The delimiter ':' is used to separate the feature name from the suffix.
      #
      # This file is read by coggiebot to determine which features are enabled.
      ${
        lib.concatMapStrings (feature:
          "${feature.featureName}:${if feature.enabled then "1" else "0"}\n")
           (which-features coggiebot)
      }
    '';

in

rec {
  inherit
    which-features
    all-features-list
    featurelist
    genericFeature
    features
    coggiebot-setup;

  raw-mockingbird = builtins.removeAttrs (pkgs.callPackage ./mockingbird.nix { inherit genericFeature naerk-lib ; }) ["override" "overrideDerivation"];
  ####
  # coggiebotWrapped = pkgs.writeShellScriptBin "coggiebot" ''
  # #!${pkgs.stdenv.shell}
  # export LD_LIBRARY_PATH=${pkgs.libopus}/lib
  # export PATH=${pkgs.ffmpeg}/bin:${pkgs.youtube-dl}/bin:${mockingbird.deemix-extractor}/bin
  # exec ${coggiebot}/bin/coggiebot $@
  # '';
  ####

  # Force build to have no default features enabled
  # MkCoggiebot' { } -> naesrk-lib.buildPackage -> mkDerivation
  mkCoggiebot = {
    features-list ? [],
    options ? {},

  }:
    let
      coggie = coggiebot-setup features-list;

      pkg =
        lib.foldl (c: f: c // (f.pkg-override c)) coggie coggie.passthru.features-list;

      drv =
        (naerk-lib.buildPackage ( pkg // {
            cargoBuildOptions=
              l: l
                 ++ ["--no-default-features"]
                 ++ (lib.optional (builtins.length pkg.passthru.features-list > 0)
                   ["--features"] ++ [(lib.concatStringsSep ","
                     (lib.foldl (s: x: s ++ [x.featureName]) [] pkg.passthru.features-list)
                   )]);
          }));
    in
      pkgs.symlinkJoin {
          name = "coggiebot";
          paths = [
            drv
            ( featurelist coggie )

          ];
        };
}
